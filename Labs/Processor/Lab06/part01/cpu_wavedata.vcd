$date
	Sun May 31 16:36:27 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbenchCPU $end
$var wire 1 ! memWriteEn $end
$var wire 1 " memReadEn $end
$var wire 8 # WRITE_DATA [7:0] $end
$var wire 8 $ READ_DATA [7:0] $end
$var wire 32 % PC [31:0] $end
$var wire 32 & INS [31:0] $end
$var wire 1 ' BUSY_WAIT $end
$var wire 8 ( ADDRESS [7:0] $end
$var reg 1 ) CLK $end
$var reg 1 * RESET $end
$scope module myDataMemory $end
$var wire 1 ) clock $end
$var wire 1 * reset $end
$var wire 8 + writedata [7:0] $end
$var wire 1 ! write $end
$var wire 1 " read $end
$var wire 8 , address [7:0] $end
$var reg 1 ' busywait $end
$var reg 1 - readaccess $end
$var reg 8 . readdata [7:0] $end
$var reg 1 / writeaccess $end
$var integer 32 0 i [31:0] $end
$upscope $end
$scope module mycpu $end
$var wire 8 1 ALOP2 [7:0] $end
$var wire 1 2 ANDOUTBEQ $end
$var wire 1 3 ANDOUTBNE $end
$var wire 1 ' BUSY_WAIT $end
$var wire 1 ) CLK $end
$var wire 32 4 INSTRUCTION [31:0] $end
$var wire 8 5 MEMREAD [7:0] $end
$var wire 1 * RESET $end
$var wire 1 6 jumpMUXSEL $end
$var wire 1 7 twoscompMUXSEL $end
$var wire 1 8 regWRITEEN $end
$var wire 1 ! memWriteEn $end
$var wire 1 " memReadEn $end
$var wire 1 9 memMUXSEL $end
$var wire 1 : jump $end
$var wire 1 ; immeMUXSEL $end
$var wire 1 < bne $end
$var wire 1 = beq $end
$var wire 2 > bShifterOpCode [1:0] $end
$var wire 1 ? alu_shiftMUXSEL $end
$var wire 3 @ aluOP [2:0] $end
$var wire 8 A TWOSMUXOUT [7:0] $end
$var wire 8 B TWOSCOMPOUT [7:0] $end
$var wire 8 C SOURCE2 [7:0] $end
$var wire 8 D SOURCE1 [7:0] $end
$var wire 8 E REGSAVE [7:0] $end
$var wire 8 F REGOUT2 [7:0] $end
$var wire 8 G REGOUT1 [7:0] $end
$var wire 8 H PREV_ALU_BARREL_OUT [7:0] $end
$var wire 32 I PCNEXT [31:0] $end
$var wire 32 J PCJUMP [31:0] $end
$var wire 32 K PCINCBY4 [31:0] $end
$var wire 8 L OP [7:0] $end
$var wire 8 M DESTINATION [7:0] $end
$var wire 8 N BARRELOUT [7:0] $end
$var wire 8 O ALUOUT [7:0] $end
$var wire 1 P ALUCOMP $end
$var wire 8 Q ALOP1 [7:0] $end
$var reg 32 R PC [31:0] $end
$scope module bs $end
$var wire 8 S INPUT [7:0] $end
$var wire 1 T TMP7 $end
$var wire 1 U TMP6 $end
$var wire 1 V TMP5 $end
$var wire 1 W TMP4 $end
$var wire 1 X TMP3 $end
$var wire 1 Y TMP2 $end
$var wire 1 Z TMP1 $end
$var wire 2 [ SHIFT_MODE [1:0] $end
$var wire 8 \ SHIFT [7:0] $end
$var wire 8 ] OUTPUT [7:0] $end
$var wire 8 ^ OUTINTER [7:0] $end
$var wire 8 _ INTER2 [7:0] $end
$var wire 8 ` INTER1 [7:0] $end
$var wire 8 a INNER3 [7:0] $end
$var wire 8 b ININTER [7:0] $end
$var reg 8 c LAYER4_IN [7:0] $end
$var reg 1 d SHIFT_DIR $end
$scope module inmux $end
$var wire 8 e INPUT1 [7:0] $end
$var wire 8 f INPUT2 [7:0] $end
$var wire 1 d SELECT $end
$var reg 8 g RESULT [7:0] $end
$upscope $end
$scope module m0 $end
$var wire 1 h INPUT1 $end
$var wire 1 i SELECT $end
$var wire 1 Z INPUT2 $end
$var reg 1 j RESULT $end
$upscope $end
$scope module m00 $end
$var wire 1 k INPUT1 $end
$var wire 1 l SELECT $end
$var wire 1 Y INPUT2 $end
$var reg 1 m RESULT $end
$upscope $end
$scope module m000 $end
$var wire 1 n INPUT1 $end
$var wire 1 o SELECT $end
$var wire 1 W INPUT2 $end
$var reg 1 p RESULT $end
$upscope $end
$scope module m0000 $end
$var wire 8 q INPUT1 [7:0] $end
$var wire 8 r INPUT2 [7:0] $end
$var wire 1 s SELECT $end
$var reg 8 t RESULT [7:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 u INPUT1 $end
$var wire 1 v INPUT2 $end
$var wire 1 w SELECT $end
$var reg 1 x RESULT $end
$upscope $end
$scope module m11 $end
$var wire 1 y INPUT1 $end
$var wire 1 z SELECT $end
$var wire 1 X INPUT2 $end
$var reg 1 { RESULT $end
$upscope $end
$scope module m111 $end
$var wire 1 | INPUT1 $end
$var wire 1 } SELECT $end
$var wire 1 V INPUT2 $end
$var reg 1 ~ RESULT $end
$upscope $end
$scope module m2 $end
$var wire 1 !" INPUT1 $end
$var wire 1 "" INPUT2 $end
$var wire 1 #" SELECT $end
$var reg 1 $" RESULT $end
$upscope $end
$scope module m22 $end
$var wire 1 %" INPUT1 $end
$var wire 1 &" INPUT2 $end
$var wire 1 '" SELECT $end
$var reg 1 (" RESULT $end
$upscope $end
$scope module m222 $end
$var wire 1 )" INPUT1 $end
$var wire 1 *" SELECT $end
$var wire 1 U INPUT2 $end
$var reg 1 +" RESULT $end
$upscope $end
$scope module m3 $end
$var wire 1 ," INPUT1 $end
$var wire 1 -" INPUT2 $end
$var wire 1 ." SELECT $end
$var reg 1 /" RESULT $end
$upscope $end
$scope module m33 $end
$var wire 1 0" INPUT1 $end
$var wire 1 1" INPUT2 $end
$var wire 1 2" SELECT $end
$var reg 1 3" RESULT $end
$upscope $end
$scope module m333 $end
$var wire 1 4" INPUT1 $end
$var wire 1 5" SELECT $end
$var wire 1 T INPUT2 $end
$var reg 1 6" RESULT $end
$upscope $end
$scope module m4 $end
$var wire 1 7" INPUT1 $end
$var wire 1 8" INPUT2 $end
$var wire 1 9" SELECT $end
$var reg 1 :" RESULT $end
$upscope $end
$scope module m44 $end
$var wire 1 ;" INPUT1 $end
$var wire 1 <" INPUT2 $end
$var wire 1 =" SELECT $end
$var reg 1 >" RESULT $end
$upscope $end
$scope module m444 $end
$var wire 1 ?" INPUT1 $end
$var wire 1 @" INPUT2 $end
$var wire 1 A" SELECT $end
$var reg 1 B" RESULT $end
$upscope $end
$scope module m5 $end
$var wire 1 C" INPUT1 $end
$var wire 1 D" INPUT2 $end
$var wire 1 E" SELECT $end
$var reg 1 F" RESULT $end
$upscope $end
$scope module m55 $end
$var wire 1 G" INPUT1 $end
$var wire 1 H" INPUT2 $end
$var wire 1 I" SELECT $end
$var reg 1 J" RESULT $end
$upscope $end
$scope module m555 $end
$var wire 1 K" INPUT1 $end
$var wire 1 L" INPUT2 $end
$var wire 1 M" SELECT $end
$var reg 1 N" RESULT $end
$upscope $end
$scope module m6 $end
$var wire 1 O" INPUT1 $end
$var wire 1 P" INPUT2 $end
$var wire 1 Q" SELECT $end
$var reg 1 R" RESULT $end
$upscope $end
$scope module m66 $end
$var wire 1 S" INPUT1 $end
$var wire 1 T" INPUT2 $end
$var wire 1 U" SELECT $end
$var reg 1 V" RESULT $end
$upscope $end
$scope module m666 $end
$var wire 1 W" INPUT1 $end
$var wire 1 X" INPUT2 $end
$var wire 1 Y" SELECT $end
$var reg 1 Z" RESULT $end
$upscope $end
$scope module m7 $end
$var wire 1 [" INPUT1 $end
$var wire 1 \" INPUT2 $end
$var wire 1 ]" SELECT $end
$var reg 1 ^" RESULT $end
$upscope $end
$scope module m77 $end
$var wire 1 _" INPUT1 $end
$var wire 1 `" INPUT2 $end
$var wire 1 a" SELECT $end
$var reg 1 b" RESULT $end
$upscope $end
$scope module m777 $end
$var wire 1 c" INPUT1 $end
$var wire 1 d" INPUT2 $end
$var wire 1 e" SELECT $end
$var reg 1 f" RESULT $end
$upscope $end
$scope module mt1 $end
$var wire 1 g" INPUT1 $end
$var wire 1 h" INPUT2 $end
$var wire 1 i" INPUT3 $end
$var wire 1 j" INPUT4 $end
$var wire 2 k" SELECT [1:0] $end
$var reg 1 Z RESULT $end
$upscope $end
$scope module mt2 $end
$var wire 1 l" INPUT1 $end
$var wire 1 m" INPUT2 $end
$var wire 1 n" INPUT3 $end
$var wire 1 o" INPUT4 $end
$var wire 2 p" SELECT [1:0] $end
$var reg 1 Y RESULT $end
$upscope $end
$scope module mt3 $end
$var wire 1 q" INPUT1 $end
$var wire 1 r" INPUT2 $end
$var wire 1 s" INPUT3 $end
$var wire 1 t" INPUT4 $end
$var wire 2 u" SELECT [1:0] $end
$var reg 1 X RESULT $end
$upscope $end
$scope module mt4 $end
$var wire 1 v" INPUT1 $end
$var wire 1 w" INPUT2 $end
$var wire 1 x" INPUT3 $end
$var wire 1 y" INPUT4 $end
$var wire 2 z" SELECT [1:0] $end
$var reg 1 W RESULT $end
$upscope $end
$scope module mt5 $end
$var wire 1 {" INPUT1 $end
$var wire 1 |" INPUT2 $end
$var wire 1 }" INPUT3 $end
$var wire 1 ~" INPUT4 $end
$var wire 2 !# SELECT [1:0] $end
$var reg 1 V RESULT $end
$upscope $end
$scope module mt6 $end
$var wire 1 "# INPUT1 $end
$var wire 1 ## INPUT2 $end
$var wire 1 $# INPUT3 $end
$var wire 1 %# INPUT4 $end
$var wire 2 &# SELECT [1:0] $end
$var reg 1 U RESULT $end
$upscope $end
$scope module mt7 $end
$var wire 1 '# INPUT1 $end
$var wire 1 (# INPUT2 $end
$var wire 1 )# INPUT3 $end
$var wire 1 *# INPUT4 $end
$var wire 2 +# SELECT [1:0] $end
$var reg 1 T RESULT $end
$upscope $end
$scope module outmux $end
$var wire 8 ,# INPUT1 [7:0] $end
$var wire 8 -# INPUT2 [7:0] $end
$var wire 1 d SELECT $end
$var reg 8 .# RESULT [7:0] $end
$upscope $end
$upscope $end
$scope module jumpadder $end
$var wire 32 /# INPUT2 [31:0] $end
$var wire 32 0# INPUT1 [31:0] $end
$var reg 32 1# RESULT [31:0] $end
$upscope $end
$scope module muMem $end
$var wire 8 2# INPUT2 [7:0] $end
$var wire 1 9 SELECT $end
$var wire 8 3# INPUT1 [7:0] $end
$var reg 8 4# RESULT [7:0] $end
$upscope $end
$scope module muxFin $end
$var wire 8 5# INPUT2 [7:0] $end
$var wire 1 ? SELECT $end
$var wire 8 6# INPUT1 [7:0] $end
$var reg 8 7# RESULT [7:0] $end
$upscope $end
$scope module muximme $end
$var wire 8 8# INPUT2 [7:0] $end
$var wire 1 ; SELECT $end
$var wire 8 9# INPUT1 [7:0] $end
$var reg 8 :# RESULT [7:0] $end
$upscope $end
$scope module muxjump $end
$var wire 32 ;# INPUT2 [31:0] $end
$var wire 1 6 SELECT $end
$var wire 32 <# INPUT1 [31:0] $end
$var reg 32 =# RESULT [31:0] $end
$upscope $end
$scope module muxtwos $end
$var wire 1 7 SELECT $end
$var wire 8 ># INPUT2 [7:0] $end
$var wire 8 ?# INPUT1 [7:0] $end
$var reg 8 @# RESULT [7:0] $end
$upscope $end
$scope module myadder $end
$var wire 32 A# INPUT1 [31:0] $end
$var wire 32 B# INPUT2 [31:0] $end
$var reg 32 C# RESULT [31:0] $end
$upscope $end
$scope module myalu $end
$var wire 1 P COMP $end
$var wire 8 D# DATA1 [7:0] $end
$var wire 8 E# DATA2 [7:0] $end
$var wire 3 F# SELECT [2:0] $end
$var wire 8 G# MULRESULT [7:0] $end
$var reg 8 H# RESULT [7:0] $end
$scope module mul $end
$var wire 8 I# DATA1 [7:0] $end
$var wire 8 J# DATA2 [7:0] $end
$var wire 8 K# SHIFT7 [7:0] $end
$var wire 8 L# SHIFT6 [7:0] $end
$var wire 8 M# SHIFT5 [7:0] $end
$var wire 8 N# SHIFT4 [7:0] $end
$var wire 8 O# SHIFT3 [7:0] $end
$var wire 8 P# SHIFT2 [7:0] $end
$var wire 8 Q# SHIFT1 [7:0] $end
$var wire 8 R# SHIFT0 [7:0] $end
$var reg 8 S# RES0 [7:0] $end
$var reg 8 T# RES1 [7:0] $end
$var reg 8 U# RES2 [7:0] $end
$var reg 8 V# RES3 [7:0] $end
$var reg 8 W# RES4 [7:0] $end
$var reg 8 X# RES5 [7:0] $end
$var reg 8 Y# RES6 [7:0] $end
$var reg 8 Z# RES7 [7:0] $end
$var reg 8 [# RESULT [7:0] $end
$upscope $end
$upscope $end
$scope module mycu $end
$var wire 1 \# ALUCOMP $end
$var wire 8 ]# OP [7:0] $end
$var wire 1 * RESET $end
$var reg 3 ^# aluOP [2:0] $end
$var reg 1 ? alu_shiftMUXSEL $end
$var reg 2 _# bShifterOpCode [1:0] $end
$var reg 1 = beq $end
$var reg 1 < bne $end
$var reg 1 ; immeMUXSEL $end
$var reg 1 : jump $end
$var reg 1 9 memMUXSEL $end
$var reg 1 " memReadEn $end
$var reg 1 ! memWriteEn $end
$var reg 1 8 regWRITEEN $end
$var reg 1 7 twoscompMUXSEL $end
$upscope $end
$scope module myreg $end
$var wire 1 ) CLK $end
$var wire 8 `# IN [7:0] $end
$var wire 3 a# INADDRESS [2:0] $end
$var wire 8 b# OUT1 [7:0] $end
$var wire 3 c# OUT1ADDRESS [2:0] $end
$var wire 8 d# OUT2 [7:0] $end
$var wire 3 e# OUT2ADDRESS [2:0] $end
$var wire 1 * RESET $end
$var wire 1 8 WRITE $end
$var integer 32 f# i [31:0] $end
$upscope $end
$scope module twos $end
$var wire 8 g# INPUT [7:0] $end
$var reg 8 h# RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
z\#
bx [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
bx R#
bx0 Q#
bx00 P#
bx000 O#
bx0000 N#
bx00000 M#
bx000000 L#
bx0000000 K#
bx J#
bx I#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
b100 B#
b11111111111111111111111111111100 A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx00 /#
bx .#
bx -#
bx ,#
bx +#
0*#
x)#
x(#
0'#
bx &#
0%#
x$#
x##
0"#
bx !#
0~"
x}"
x|"
0{"
bx z"
0y"
xx"
xw"
0v"
bx u"
0t"
xs"
xr"
0q"
bx p"
0o"
xn"
xm"
0l"
bx k"
0j"
xi"
xh"
0g"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
0Z"
xY"
0X"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
0N"
xM"
0L"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
0B"
xA"
0@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
06"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
0+"
x*"
0)"
0("
x'"
0&"
x%"
x$"
x#"
x""
x!"
0~
x}
0|
0{
xz
xy
xx
xw
xv
xu
bx t
xs
bx r
bx0000000 q
0p
xo
0n
0m
xl
0k
0j
xi
xh
bx g
bx f
bx e
xd
bx c
bx b
bx0000000 a
bx0 `
bx000 _
bx ^
bx ]
bx \
bx [
0Z
0Y
0X
0W
0V
0U
0T
bx S
b11111111111111111111111111111100 R
bx Q
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
x?
bx >
0=
0<
x;
0:
x9
x8
x7
06
bx 5
bx 4
03
02
bx 1
b100000000 0
0/
bx .
0-
bx ,
bx +
1*
1)
bx (
0'
bx &
b11111111111111111111111111111100 %
bx $
bx #
x"
x!
$end
#1
0*
#2
b0 I
b0 =#
b1000 f#
b0 K
b0 0#
b0 <#
b0 C#
#5
0)
#6
1P
b0 (
b0 ,
b0 O
b0 6#
b0 H#
b0 G#
b0 [#
#10
1)
#11
b0 %
b0 R
b0 A#
#13
x+"
x)"
xX"
bx00 _
x("
xk
x&"
1s
xZ"
xN"
xB"
bx00 a
bx00 q
x6"
bx `
xj
b0 c#
0e"
0Y"
0M"
0A"
05"
0*"
0}
0o
1a"
1U"
1I"
1="
12"
1'"
1z
1l
0]"
0Q"
0E"
09"
0."
0#"
0w
0i
bx000 V#
bx0 T#
b0 a#
b0 D
b1010 Q
b1010 \
b1010 :#
b1010 E#
b1010 J#
b10 e#
b100 I
b100 =#
b0 /#
b0 M
b1010 C
b1010 8#
b101 L
b101 ]#
b100 K
b100 0#
b100 <#
b100 C#
b101000000000000000000001010 &
b101000000000000000000001010 4
#14
b0 N
b0 ]
b0 .#
b0 5#
b0 -#
b0 ^
b0 t
b0 ,#
b0 E
b0 4#
b0 `#
b0 H
b0 3#
b0 7#
b0 c
b0 r
1d
0"
0!
09
b0 >
b0 [
b0 k"
b0 p"
b0 u"
b0 z"
b0 !#
b0 &#
b0 +#
b0 _#
0?
b0 @
b0 F#
b0 ^#
18
1;
07
#15
0N"
0B"
06"
0f"
0+"
b0 a
b0 q
0Z"
0c"
0)#
0W"
0$#
0K"
0}"
0?"
0x"
04"
0d"
0)"
0X"
0b"
0V"
0J"
0>"
03"
b0 _
0("
0_"
0s"
0S"
0n"
0G"
0`"
0;"
0T"
00"
0H"
0%"
0<"
0y
01"
0k
0&"
0^"
0R"
0F"
0:"
0/"
0$"
0x
b0 `
0j
0P
0\"
0["
0P"
0O"
0D"
0C"
08"
07"
0-"
0,"
0""
0!"
0v
0u
0h
0i"
b1010 E
b1010 4#
b1010 `#
b0 b
b0 g
b0 V#
b0 T#
b1010 H
b1010 3#
b1010 7#
0h"
0m"
0r"
0w"
0|"
0##
0(#
b0 f
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 A
b0 9#
b0 @#
b1010 (
b1010 ,
b1010 O
b1010 6#
b1010 H#
b0 1
b0 S
b0 e
b0 D#
b0 I#
b0 #
b0 +
b0 G
b0 b#
b0 F
b0 ?#
b0 d#
b0 g#
b100 J
b100 1#
b100 ;#
0)
#16
b0 B
b0 >#
b0 h#
#20
1)
#21
b100 %
b100 R
b100 A#
#23
b1 N
b1 ]
b1 .#
b1 5#
b1 -#
b10000000 ^
b10000000 t
b10000000 ,#
b10000000 a
b10000000 q
1f"
0s
1c"
1)#
b10000000 _
1b"
1_"
1s"
1G"
1`"
1^"
b10100000 `
1F"
1\"
1O"
1D"
17"
1]"
1Q"
1E"
19"
1."
1#"
1w
1i
b1010000 b
b1010000 g
b10100 T#
b1010 S#
b11 Q
b11 \
b11 :#
b11 E#
b11 J#
b11 e#
b1000 I
b1000 =#
b1010000 f
b1010 R#
b10100 Q#
b101000 P#
b1010000 O#
b10100000 N#
b1000000 M#
b10000000 L#
b11 C
b11 8#
b10001 L
b10001 ]#
b1000 K
b1000 0#
b1000 <#
b1000 C#
b1010 1
b1010 S
b1010 e
b1010 D#
b1010 I#
b1010 #
b1010 +
b1010 G
b1010 b#
b10001000000000000000000000011 &
b10001000000000000000000000011 4
#24
b11 E
b11 4#
b11 `#
1/
1'
b11 H
b11 3#
b11 7#
1!
08
b11 (
b11 ,
b11 O
b11 6#
b11 H#
#25
b1000 J
b1000 1#
b1000 ;#
0)
#29
b11110 G#
b11110 [#
#30
1)
#35
0)
#40
1)
#45
0)
#50
1)
#55
0)
#60
1)
#65
0)
#70
1)
0/
0'
#71
b1000 %
b1000 R
b1000 A#
#73
b1 a#
b1100 I
b1100 =#
b100 /#
b1 M
b1111 L
b1111 ]#
b1100 K
b1100 0#
b1100 <#
b1100 C#
b1111000000010000000000000011 &
b1111000000010000000000000011 4
#74
1-
1'
bx E
bx 4#
bx `#
1"
0!
19
18
#75
b10000 J
b10000 1#
b10000 ;#
0)
#80
1)
#85
0)
#90
1)
#95
0)
#100
1)
#105
0)
#110
1)
#115
0)
#120
b1010 E
b1010 4#
b1010 `#
1)
0-
0'
b1010 $
b1010 .
b1010 5
b1010 2#
#121
b1100 %
b1100 R
b1100 A#
#123
b0 N
b0 ]
b0 .#
b0 5#
b0 -#
b0 ^
b0 t
b0 ,#
xs
b0 a
b0 q
0f"
bx c#
xe"
xY"
xM"
xA"
x5"
x*"
x}
xo
xa"
xU"
xI"
x="
x2"
x'"
xz
xl
x]"
xQ"
xE"
x9"
x."
x#"
xw
xi
b0 T#
b0 S#
bx a#
bx D
bx Q
bx \
bx :#
bx E#
bx J#
bx e#
b10000 I
b10000 =#
bx00 /#
bx M
bx C
bx 8#
bx L
bx ]#
b10000 K
b10000 0#
b10000 <#
b10000 C#
bx &
bx 4
#124
xP
bx H
bx 3#
bx 7#
bx (
bx ,
bx O
bx 6#
bx H#
#125
bx0000000 a
bx0000000 q
xf"
xc"
x)#
xW"
x$#
xK"
x}"
x?"
xx"
x4"
xd"
xb"
xV"
xJ"
x>"
bx000 _
x3"
x_"
xs"
xS"
xn"
xG"
x`"
x;"
xT"
x0"
xH"
x%"
x<"
xy
x1"
x^"
xR"
xF"
x:"
x/"
x$"
bx0 `
xx
x\"
x["
xP"
xO"
xD"
xC"
x8"
x7"
x-"
x,"
x""
x!"
xv
xu
xh
xi"
bx b
bx g
xh"
xm"
xr"
xw"
x|"
x##
x(#
bx f
bx R#
bx0 Q#
bx00 P#
bx000 O#
bx0000 N#
bx00000 M#
bx000000 L#
bx0000000 K#
bx A
bx 9#
bx @#
bx 1
bx S
bx e
bx D#
bx I#
bx #
bx +
bx G
bx b#
bx F
bx ?#
bx d#
bx g#
bx J
bx 1#
bx ;#
0)
#126
bx B
bx >#
bx h#
#129
b0 G#
b0 [#
#130
1)
#131
b10000 %
b10000 R
b10000 A#
#133
b10100 I
b10100 =#
b10100 K
b10100 0#
b10100 <#
b10100 C#
#135
0)
#140
1)
#141
b10100 %
b10100 R
b10100 A#
#143
b11000 I
b11000 =#
b11000 K
b11000 0#
b11000 <#
b11000 C#
#145
0)
#150
1)
#151
b11000 %
b11000 R
b11000 A#
#153
b11100 I
b11100 =#
b11100 K
b11100 0#
b11100 <#
b11100 C#
#155
0)
#160
1)
#161
b11100 %
b11100 R
b11100 A#
#163
b100000 I
b100000 =#
b100000 K
b100000 0#
b100000 <#
b100000 C#
#165
0)
#170
1)
#171
b100000 %
b100000 R
b100000 A#
#173
b100100 I
b100100 =#
b100100 K
b100100 0#
b100100 <#
b100100 C#
#175
0)
#180
1)
#181
b100100 %
b100100 R
b100100 A#
#183
b101000 I
b101000 =#
b101000 K
b101000 0#
b101000 <#
b101000 C#
#185
0)
#190
1)
#191
b101000 %
b101000 R
b101000 A#
#193
b101100 I
b101100 =#
b101100 K
b101100 0#
b101100 <#
b101100 C#
#195
0)
#200
1)
#201
b101100 %
b101100 R
b101100 A#
#203
b110000 I
b110000 =#
b110000 K
b110000 0#
b110000 <#
b110000 C#
#205
0)
#210
1)
#211
b110000 %
b110000 R
b110000 A#
#213
b110100 I
b110100 =#
b110100 K
b110100 0#
b110100 <#
b110100 C#
#215
0)
#220
1)
#221
b110100 %
b110100 R
b110100 A#
#223
b111000 I
b111000 =#
b111000 K
b111000 0#
b111000 <#
b111000 C#
#225
0)
#230
1)
#231
b111000 %
b111000 R
b111000 A#
#233
b111100 I
b111100 =#
b111100 K
b111100 0#
b111100 <#
b111100 C#
#235
0)
#240
1)
#241
b111100 %
b111100 R
b111100 A#
#242
